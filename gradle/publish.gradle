ext {
    websiteUrl = 'https://github.com/novoda/gradle-static-analysis-plugin'
}

version = '1.2'
groovydoc.docTitle = 'Static Analysis Plugin'

apply plugin: 'com.novoda.build-properties'
buildProperties {

    env {
        using System.getenv()
    }

    secrets {
        using rootProject.file('secrets.properties')
        description = '''This file should contain:
                        - git.username: the username used to push to the repo
                        - git.password: the password used to push to the repo
                        - gradle.publish.key: the key to publish the plugin to the Gradle Plugins Repository
                        - gradle.publish.secret: the secret to publish the plugin to the Gradle Plugins Repository'''
                .stripIndent()

    }

    cli {
        using(project)
    }

    bintray {
        def bintrayCredentials = {
            return isDryRun() ?
                    ['bintrayOrg': 'n/a', 'bintrayRepo': 'n/a', 'bintrayUser': 'n/a', 'bintrayKey': 'n/a'] :
                    new File("${System.getenv('BINTRAY_PROPERTIES')}")
        }
        using(bintrayCredentials()).or(cli)
        description = '''This should contain the following properties:
                        - bintrayOrg: name of the Bintray organisation to deploy the artifacts to
                        - bintrayRepo: name of the repo of the organisation to deploy the artifacts to
                        - bintrayUser: name of the account used to deploy the artifacts
                        - bintrayKey: API key of the account used to deploy the artifacts'''
                .stripIndent()
    }

}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'com.novoda.bintray-release'

publish {
    groupId = 'com.novoda'
    artifactId = 'gradle-static-analysis-plugin'
    desc = 'Easy setup of static analysis tools for Android and Java projects.'
    publishVersion = buildVersion

    repoName = project.buildProperties.bintray['bintrayRepo'].string
    userOrg = project.buildProperties.bintray['bintrayOrg'].string
    bintrayUser = project.buildProperties.bintray['bintrayUser'].string
    bintrayKey = project.buildProperties.bintray['bintrayKey'].string
    website = project.websiteUrl
}

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.github-pages'

githubPages {
    commitMessage = "Deploy groovydoc for release $tag"
    pages {
        from groovydoc.destinationDir
        into "docs/${project.version}"
    }
}

pluginBundle {
    website = websiteUrl
    vcsUrl = websiteUrl
    description = 'A Gradle plugin to easily apply the same setup of static analysis tools across different Android, Java or Kotlin projects.'
    tags = ['java', 'kotlin', 'android', 'static analysis', 'code quality']

    plugins {
        gradleStaticAnalysisPlugin {
            id = 'com.novoda.static-analysis'
            displayName = 'Gradle static analysis plugin'
        }
    }
}

task prepareGhCredentials {
    description = 'Prepare GitHub credentials'
    group = 'release'
    doLast {
        String username = buildProperties.env['GITHUB_USERNAME'].or(buildProperties.secrets['github.username']).string
        String password = buildProperties.env['GITHUB_TOKEN'].or(buildProperties.secrets['github.password']).string
        System.properties['org.ajoberstar.grgit.auth.username'] = username
        System.properties['org.ajoberstar.grgit.auth.password'] = password
    }
}

prepareGhPages.dependsOn groovydoc
publishGhPages.dependsOn prepareGhCredentials

task prepareGradlePluginsRepoRelease {
    doLast {
        def key = buildProperties.env['GRADLE_PLUGINS_REPO_KEY'] | buildProperties.secrets['gradle.publish.key']
        def secret = buildProperties.env['GRADLE_PLUGINS_REPO_SECRET'] | buildProperties.secrets['gradle.publish.secret']
        System.properties['gradle.publish.key'] = key.string
        System.properties['gradle.publish.secret'] = secret.string
    }
}

task prepareRelease {
    description = 'Prepare changelog and tag for release'
    group = 'release'
    dependsOn prepareGhPages, prepareGhCredentials, prepareGradlePluginsRepoRelease
    doLast {
        String changelog = extractChangelog()
        grgit.tag.add {
            name = tag
            message = "Release $tag\n\n$changelog"
        }
    }
}

String extractChangelog() {
    String fullChangelog = rootProject.file('CHANGELOG.md').text
    def latestChangelog = (fullChangelog =~ /\[Version ${buildVersion}.*\n-*([\s\S]*?)\[Version.*\n-*/)
    if (latestChangelog.size() > 0) {
        return latestChangelog[0][1].trim()
    }

    def firstChangelog = (fullChangelog =~ /\[Version ${buildVersion}.*\n-*([\s\S]*)/)
    if (firstChangelog.size() > 0) {
        return firstChangelog[0][1].trim()
    }
    throw new GradleException("No changelog found for version $buildVersion")
}

task printChangelog {
    group = 'help'
    description = "Print the provisional changelog for version $buildVersion"
    doLast {
        println "\nChangelog for version $buildVersion:\n${extractChangelog()}\n"
    }
}

task prepareSnapshot {
    description = 'Prepare changelog and tag for snapshot'
    group = 'release'
    dependsOn prepareGhCredentials
    doLast {
        grgit.tag.add {
            name = tag
        }
    }
}

task publishArtifact {
    description = "Publish artifact for plugin version: $tag"
    group = 'release'
    project.afterEvaluate { dependsOn bintrayUpload }
    mustRunAfter prepareRelease
}

task publishGroovydoc {
    description = "Deploy groovydoc for plugin version: $tag"
    group = 'release'
    dependsOn publishGhPages
    mustRunAfter publishArtifact
}

task publishRelease {
    description = "Publish release for plugin version: $tag"
    group = 'release'
    if (isDryRun()) {
        dependsOn publishArtifact
    } else {
        dependsOn publishArtifact
        if (isSnapshot()) {
            dependsOn prepareSnapshot
            doLast {
                grgit.push {
                    tags = true
                }
            }
        } else {
            dependsOn prepareRelease, publishGroovydoc, publishPlugins
            doLast {
                grgit.push {
                    tags = true
                }
            }
        }
    }
}

boolean isDryRun() {
    buildProperties.cli['dryRun'].or(true).boolean
}

boolean isSnapshot() {
    buildProperties.cli['bintraySnapshot'].or(false).boolean
}

String getBuildVersion() {
    return isSnapshot() ? "DEVELOP-${System.getenv('BUILD_NUMBER') ?: 'LOCAL'}" : project.version
}

String getTag() {
    return buildVersion
}
